#!/usr/bin/env node

require('dotenv').config();

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodepop:server');
var http = require('http');

const cluster = require('cluster');
const os = require('os');

/**
 * We check that the app is running as a master or as a clone.
 */
if (cluster.isMaster) {
  // we are master
  // run clones of our process

  const numCpus = os.cpus().length;
  // console.log(numCpus);
  for (let i = 0; i < numCpus; i++) {
    cluster.fork(); // Create a clon (fork)
  }
  cluster.on('listening', (worker, address) => {
    console.log(
      `Worker ${worker.id} with pid ${worker.process.pid} is connected to the port ${address.port}`
    );
  });
  cluster.on('exit', (worker, code, signal) => {
    console.log(
      `Worker ${worker.id} with pid ${worker.process.pid} has ended whit code ${code} and ${signal}`
    );
    console.log('Starting a new worker...');
    cluster.fork();
  });
} else {
  // We are a clone, so we start an http server.
  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
